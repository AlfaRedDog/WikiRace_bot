name: Build and push

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
        id: buildx

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: |
            target/classes/
            target/test-classes/
            target/kotlin-ic/
          key: ${{ runner.os }}-build-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          server-id: github
          cache: 'maven'

      - name: Get version from pom.xml
        id: version
        run: |
          POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo ::set-output name=version::${POM_VERSION}

      - name: Docker image meta
        if: github.event_name == 'push'
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest

      - name: Docker image meta for tgbot
        if: github.event_name == 'push'
        id: meta_tgbot
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}/tgbot
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=tgbot-latest

      - name: Build with Maven
        env:
          GITHUB_USERNAME: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: build
        run: |
          mvn -B package -DskipTests -s settings.xml
          JAR_PATH=$(mvn help:evaluate -Dexpression=project.build.finalName -q -DforceStdout)
          echo ::set-output name=jar::${JAR_PATH}.jar

      - name: Setup QEMU
        if: github.event_name == 'push'
        uses: docker/setup-qemu-action@v1

      - name: Build and push Docker image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Build and push Docker image for tgbot
        if: github.event_name == 'push'
        uses: docker/build-push-action@v2
        with:
          context: .
          dockerfile: Dockerfile-tgbot # Укажите путь к Dockerfile-tgbot
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta_tgbot.outputs.tags }}